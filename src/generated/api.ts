/* tslint:disable */
/* eslint-disable */
/**
 * Track Your Finance API
 * Multi-finance app backend for spending diary and real estate tracking
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthAcceptInvitationPost200Response
 */
export interface AuthAcceptInvitationPost200Response {
    /**
     * 
     * @type {string}
     * @memberof AuthAcceptInvitationPost200Response
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface AuthAcceptInvitationPost400Response
 */
export interface AuthAcceptInvitationPost400Response {
    /**
     * 
     * @type {string}
     * @memberof AuthAcceptInvitationPost400Response
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface AuthRegisterPost201Response
 */
export interface AuthRegisterPost201Response {
    /**
     * 
     * @type {string}
     * @memberof AuthRegisterPost201Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegisterPost201Response
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRegisterPost201Response
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface HandlersErrorResponse
 */
export interface HandlersErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof HandlersErrorResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface ModelsAcceptInvitationRequest
 */
export interface ModelsAcceptInvitationRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsAcceptInvitationRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsAcceptInvitationRequest
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface ModelsCategoriesResponse
 */
export interface ModelsCategoriesResponse {
    /**
     * 
     * @type {Array<ModelsCategory>}
     * @memberof ModelsCategoriesResponse
     */
    'categories'?: Array<ModelsCategory>;
}
/**
 * 
 * @export
 * @interface ModelsCategory
 */
export interface ModelsCategory {
    /**
     * 
     * @type {string}
     * @memberof ModelsCategory
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategory
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategory
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategory
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategory
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsCategory
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategory
     */
    'name'?: string;
    /**
     * 
     * @type {ModelsCategoryType}
     * @memberof ModelsCategory
     */
    'type'?: ModelsCategoryType;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategory
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategory
     */
    'user_id'?: string;
}


/**
 * 
 * @export
 * @interface ModelsCategoryStats
 */
export interface ModelsCategoryStats {
    /**
     * 
     * @type {number}
     * @memberof ModelsCategoryStats
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategoryStats
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategoryStats
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategoryStats
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategoryStats
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategoryStats
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsCategoryStats
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategoryStats
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsCategoryStats
     */
    'percentage'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsCategoryStats
     */
    'transaction_count'?: number;
    /**
     * 
     * @type {ModelsCategoryType}
     * @memberof ModelsCategoryStats
     */
    'type'?: ModelsCategoryType;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategoryStats
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCategoryStats
     */
    'user_id'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ModelsCategoryType = {
    CategoryTypeIncome: 'INCOME',
    CategoryTypeExpense: 'EXPENSE'
} as const;

export type ModelsCategoryType = typeof ModelsCategoryType[keyof typeof ModelsCategoryType];


/**
 * 
 * @export
 * @interface ModelsCreateCategoryRequest
 */
export interface ModelsCreateCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateCategoryRequest
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateCategoryRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateCategoryRequest
     */
    'icon'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateCategoryRequest
     */
    'name': string;
    /**
     * 
     * @type {ModelsCategoryType}
     * @memberof ModelsCreateCategoryRequest
     */
    'type': ModelsCategoryType;
}


/**
 * 
 * @export
 * @interface ModelsCreatePropertyRequest
 */
export interface ModelsCreatePropertyRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsCreatePropertyRequest
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof ModelsCreatePropertyRequest
     */
    'buy_price': number;
    /**
     * 
     * @type {number}
     * @memberof ModelsCreatePropertyRequest
     */
    'current_value': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreatePropertyRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreatePropertyRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreatePropertyRequest
     */
    'purchase_date': string;
    /**
     * 
     * @type {number}
     * @memberof ModelsCreatePropertyRequest
     */
    'remaining_debt'?: number;
}
/**
 * 
 * @export
 * @interface ModelsCreateRealEstateTransactionRequest
 */
export interface ModelsCreateRealEstateTransactionRequest {
    /**
     * 
     * @type {number}
     * @memberof ModelsCreateRealEstateTransactionRequest
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateRealEstateTransactionRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateRealEstateTransactionRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateRealEstateTransactionRequest
     */
    'property_id': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateRealEstateTransactionRequest
     */
    'transaction_date'?: string;
    /**
     * 
     * @type {ModelsRealEstateTransactionType}
     * @memberof ModelsCreateRealEstateTransactionRequest
     */
    'type': ModelsRealEstateTransactionType;
}


/**
 * 
 * @export
 * @interface ModelsCreateTransactionRequest
 */
export interface ModelsCreateTransactionRequest {
    /**
     * 
     * @type {number}
     * @memberof ModelsCreateTransactionRequest
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateTransactionRequest
     */
    'category_id': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateTransactionRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateTransactionRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsCreateTransactionRequest
     */
    'transaction_date'?: string;
    /**
     * 
     * @type {ModelsTransactionType}
     * @memberof ModelsCreateTransactionRequest
     */
    'type': ModelsTransactionType;
}


/**
 * 
 * @export
 * @interface ModelsLoginRequest
 */
export interface ModelsLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsLoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsLoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface ModelsLoginResponse
 */
export interface ModelsLoginResponse {
    /**
     * 
     * @type {string}
     * @memberof ModelsLoginResponse
     */
    'token'?: string;
    /**
     * 
     * @type {ModelsUser}
     * @memberof ModelsLoginResponse
     */
    'user'?: ModelsUser;
}
/**
 * 
 * @export
 * @interface ModelsMonthlyStats
 */
export interface ModelsMonthlyStats {
    /**
     * 
     * @type {number}
     * @memberof ModelsMonthlyStats
     */
    'month'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsMonthlyStats
     */
    'net_amount'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsMonthlyStats
     */
    'total_expense'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsMonthlyStats
     */
    'total_income'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsMonthlyStats
     */
    'transaction_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsMonthlyStats
     */
    'year'?: number;
}
/**
 * 
 * @export
 * @interface ModelsProperty
 */
export interface ModelsProperty {
    /**
     * 
     * @type {string}
     * @memberof ModelsProperty
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof ModelsProperty
     */
    'buy_price': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsProperty
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsProperty
     */
    'current_value': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsProperty
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsProperty
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsProperty
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsProperty
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsProperty
     */
    'purchase_date': string;
    /**
     * 
     * @type {number}
     * @memberof ModelsProperty
     */
    'remaining_debt'?: number;
    /**
     * Relationships
     * @type {Array<ModelsRealEstateTransaction>}
     * @memberof ModelsProperty
     */
    'transactions'?: Array<ModelsRealEstateTransaction>;
    /**
     * 
     * @type {string}
     * @memberof ModelsProperty
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsProperty
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface ModelsPropertyWithBalance
 */
export interface ModelsPropertyWithBalance {
    /**
     * 
     * @type {string}
     * @memberof ModelsPropertyWithBalance
     */
    'address': string;
    /**
     * 
     * @type {number}
     * @memberof ModelsPropertyWithBalance
     */
    'balance'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsPropertyWithBalance
     */
    'buy_price': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsPropertyWithBalance
     */
    'created_at'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsPropertyWithBalance
     */
    'current_value': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsPropertyWithBalance
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsPropertyWithBalance
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsPropertyWithBalance
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsPropertyWithBalance
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsPropertyWithBalance
     */
    'purchase_date': string;
    /**
     * 
     * @type {number}
     * @memberof ModelsPropertyWithBalance
     */
    'remaining_debt'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsPropertyWithBalance
     */
    'total_expense'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsPropertyWithBalance
     */
    'total_income'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsPropertyWithBalance
     */
    'transaction_count'?: number;
    /**
     * Relationships
     * @type {Array<ModelsRealEstateTransaction>}
     * @memberof ModelsPropertyWithBalance
     */
    'transactions'?: Array<ModelsRealEstateTransaction>;
    /**
     * 
     * @type {string}
     * @memberof ModelsPropertyWithBalance
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsPropertyWithBalance
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface ModelsRealEstateLifetimeStats
 */
export interface ModelsRealEstateLifetimeStats {
    /**
     * 
     * @type {string}
     * @memberof ModelsRealEstateLifetimeStats
     */
    'first_transaction'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRealEstateLifetimeStats
     */
    'last_transaction'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsRealEstateLifetimeStats
     */
    'net_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsRealEstateLifetimeStats
     */
    'property_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsRealEstateLifetimeStats
     */
    'total_expense'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsRealEstateLifetimeStats
     */
    'total_income'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsRealEstateLifetimeStats
     */
    'transaction_count'?: number;
}
/**
 * 
 * @export
 * @interface ModelsRealEstateMonthlyStats
 */
export interface ModelsRealEstateMonthlyStats {
    /**
     * 
     * @type {number}
     * @memberof ModelsRealEstateMonthlyStats
     */
    'month'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsRealEstateMonthlyStats
     */
    'net_amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsRealEstateMonthlyStats
     */
    'property_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsRealEstateMonthlyStats
     */
    'total_expense'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsRealEstateMonthlyStats
     */
    'total_income'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsRealEstateMonthlyStats
     */
    'transaction_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsRealEstateMonthlyStats
     */
    'year'?: number;
}
/**
 * 
 * @export
 * @interface ModelsRealEstateTransaction
 */
export interface ModelsRealEstateTransaction {
    /**
     * 
     * @type {number}
     * @memberof ModelsRealEstateTransaction
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof ModelsRealEstateTransaction
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRealEstateTransaction
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRealEstateTransaction
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRealEstateTransaction
     */
    'name': string;
    /**
     * 
     * @type {ModelsProperty}
     * @memberof ModelsRealEstateTransaction
     */
    'property'?: ModelsProperty;
    /**
     * 
     * @type {string}
     * @memberof ModelsRealEstateTransaction
     */
    'property_id': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRealEstateTransaction
     */
    'transaction_date'?: string;
    /**
     * 
     * @type {ModelsRealEstateTransactionType}
     * @memberof ModelsRealEstateTransaction
     */
    'type': ModelsRealEstateTransactionType;
    /**
     * 
     * @type {string}
     * @memberof ModelsRealEstateTransaction
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRealEstateTransaction
     */
    'user_id'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const ModelsRealEstateTransactionType = {
    RealEstateIncome: 'INCOME',
    RealEstateExpense: 'EXPENSE'
} as const;

export type ModelsRealEstateTransactionType = typeof ModelsRealEstateTransactionType[keyof typeof ModelsRealEstateTransactionType];


/**
 * 
 * @export
 * @interface ModelsRegisterRequest
 */
export interface ModelsRegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsRegisterRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ModelsRegisterRequest
     */
    'nickname': string;
}
/**
 * 
 * @export
 * @interface ModelsStatsResponse
 */
export interface ModelsStatsResponse {
    /**
     * 
     * @type {Array<ModelsCategoryStats>}
     * @memberof ModelsStatsResponse
     */
    'categories'?: Array<ModelsCategoryStats>;
    /**
     * 
     * @type {ModelsMonthlyStats}
     * @memberof ModelsStatsResponse
     */
    'monthly'?: ModelsMonthlyStats;
}
/**
 * 
 * @export
 * @interface ModelsTransaction
 */
export interface ModelsTransaction {
    /**
     * 
     * @type {number}
     * @memberof ModelsTransaction
     */
    'amount'?: number;
    /**
     * Associations
     * @type {ModelsCategory}
     * @memberof ModelsTransaction
     */
    'category'?: ModelsCategory;
    /**
     * 
     * @type {string}
     * @memberof ModelsTransaction
     */
    'category_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsTransaction
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsTransaction
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsTransaction
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsTransaction
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsTransaction
     */
    'transaction_date'?: string;
    /**
     * 
     * @type {ModelsTransactionType}
     * @memberof ModelsTransaction
     */
    'type'?: ModelsTransactionType;
    /**
     * 
     * @type {string}
     * @memberof ModelsTransaction
     */
    'updated_at'?: string;
    /**
     * 
     * @type {ModelsUser}
     * @memberof ModelsTransaction
     */
    'user'?: ModelsUser;
    /**
     * 
     * @type {string}
     * @memberof ModelsTransaction
     */
    'user_id'?: string;
}


/**
 * 
 * @export
 * @interface ModelsTransactionListResponse
 */
export interface ModelsTransactionListResponse {
    /**
     * 
     * @type {number}
     * @memberof ModelsTransactionListResponse
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsTransactionListResponse
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsTransactionListResponse
     */
    'total'?: number;
    /**
     * 
     * @type {Array<ModelsTransaction>}
     * @memberof ModelsTransactionListResponse
     */
    'transactions'?: Array<ModelsTransaction>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ModelsTransactionType = {
    TransactionTypeIncome: 'INCOME',
    TransactionTypeExpense: 'EXPENSE'
} as const;

export type ModelsTransactionType = typeof ModelsTransactionType[keyof typeof ModelsTransactionType];


/**
 * 
 * @export
 * @interface ModelsUpdateCategoryRequest
 */
export interface ModelsUpdateCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateCategoryRequest
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateCategoryRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateCategoryRequest
     */
    'icon'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsUpdateCategoryRequest
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateCategoryRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUpdatePropertyRequest
 */
export interface ModelsUpdatePropertyRequest {
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdatePropertyRequest
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsUpdatePropertyRequest
     */
    'buy_price'?: number;
    /**
     * 
     * @type {number}
     * @memberof ModelsUpdatePropertyRequest
     */
    'current_value'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdatePropertyRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsUpdatePropertyRequest
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdatePropertyRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdatePropertyRequest
     */
    'purchase_date'?: string;
    /**
     * 
     * @type {number}
     * @memberof ModelsUpdatePropertyRequest
     */
    'remaining_debt'?: number;
}
/**
 * 
 * @export
 * @interface ModelsUpdateRealEstateTransactionRequest
 */
export interface ModelsUpdateRealEstateTransactionRequest {
    /**
     * 
     * @type {number}
     * @memberof ModelsUpdateRealEstateTransactionRequest
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateRealEstateTransactionRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateRealEstateTransactionRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateRealEstateTransactionRequest
     */
    'property_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateRealEstateTransactionRequest
     */
    'transaction_date'?: string;
    /**
     * 
     * @type {ModelsRealEstateTransactionType}
     * @memberof ModelsUpdateRealEstateTransactionRequest
     */
    'type'?: ModelsRealEstateTransactionType;
}


/**
 * 
 * @export
 * @interface ModelsUpdateTransactionRequest
 */
export interface ModelsUpdateTransactionRequest {
    /**
     * 
     * @type {number}
     * @memberof ModelsUpdateTransactionRequest
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateTransactionRequest
     */
    'category_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateTransactionRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateTransactionRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUpdateTransactionRequest
     */
    'transaction_date'?: string;
}
/**
 * 
 * @export
 * @interface ModelsUser
 */
export interface ModelsUser {
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'id'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ModelsUser
     */
    'is_registration_complete'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'last_login_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'nickname'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'privilege'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelsUser
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface ProfilePasswordPutRequest
 */
export interface ProfilePasswordPutRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilePasswordPutRequest
     */
    'current_password'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProfilePasswordPutRequest
     */
    'new_password'?: string;
}
/**
 * 
 * @export
 * @interface ProfilePutRequest
 */
export interface ProfilePutRequest {
    /**
     * 
     * @type {string}
     * @memberof ProfilePutRequest
     */
    'nickname'?: string;
}
/**
 * 
 * @export
 * @interface PropertiesGet200Response
 */
export interface PropertiesGet200Response {
    /**
     * 
     * @type {Array<ModelsPropertyWithBalance>}
     * @memberof PropertiesGet200Response
     */
    'properties'?: Array<ModelsPropertyWithBalance>;
}
/**
 * 
 * @export
 * @interface RealEstateStatsLifetimeGet200Response
 */
export interface RealEstateStatsLifetimeGet200Response {
    /**
     * 
     * @type {ModelsRealEstateLifetimeStats}
     * @memberof RealEstateStatsLifetimeGet200Response
     */
    'lifetime'?: ModelsRealEstateLifetimeStats;
    /**
     * 
     * @type {Array<object>}
     * @memberof RealEstateStatsLifetimeGet200Response
     */
    'properties'?: Array<object>;
}
/**
 * 
 * @export
 * @interface RealEstateStatsMonthlyGet200Response
 */
export interface RealEstateStatsMonthlyGet200Response {
    /**
     * 
     * @type {ModelsRealEstateMonthlyStats}
     * @memberof RealEstateStatsMonthlyGet200Response
     */
    'monthly'?: ModelsRealEstateMonthlyStats;
    /**
     * 
     * @type {Array<object>}
     * @memberof RealEstateStatsMonthlyGet200Response
     */
    'properties'?: Array<object>;
}
/**
 * 
 * @export
 * @interface RealEstateStatsYearlyGet200Response
 */
export interface RealEstateStatsYearlyGet200Response {
    /**
     * 
     * @type {Array<ModelsRealEstateMonthlyStats>}
     * @memberof RealEstateStatsYearlyGet200Response
     */
    'months'?: Array<ModelsRealEstateMonthlyStats>;
}
/**
 * 
 * @export
 * @interface RealEstateTransactionsGet200Response
 */
export interface RealEstateTransactionsGet200Response {
    /**
     * 
     * @type {number}
     * @memberof RealEstateTransactionsGet200Response
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof RealEstateTransactionsGet200Response
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof RealEstateTransactionsGet200Response
     */
    'total'?: number;
    /**
     * 
     * @type {Array<ModelsRealEstateTransaction>}
     * @memberof RealEstateTransactionsGet200Response
     */
    'transactions'?: Array<ModelsRealEstateTransaction>;
}
/**
 * 
 * @export
 * @interface StatsCategoriesGet200Response
 */
export interface StatsCategoriesGet200Response {
    /**
     * 
     * @type {Array<ModelsCategoryStats>}
     * @memberof StatsCategoriesGet200Response
     */
    'categories'?: Array<ModelsCategoryStats>;
}
/**
 * 
 * @export
 * @interface StatsYearlyGet200Response
 */
export interface StatsYearlyGet200Response {
    /**
     * 
     * @type {Array<ModelsMonthlyStats>}
     * @memberof StatsYearlyGet200Response
     */
    'months'?: Array<ModelsMonthlyStats>;
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Complete user registration by providing password with invitation token
         * @summary Accept invitation and complete registration
         * @param {ModelsAcceptInvitationRequest} request Invitation acceptance details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAcceptInvitationPost: async (request: ModelsAcceptInvitationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('authAcceptInvitationPost', 'request', request)
            const localVarPath = `/auth/accept-invitation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authenticate user and return JWT token
         * @summary User login
         * @param {ModelsLoginRequest} request User login credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (request: ModelsLoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('authLoginPost', 'request', request)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user account with invitation token
         * @summary Register a new user
         * @param {ModelsRegisterRequest} request User registration details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost: async (request: ModelsRegisterRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('authRegisterPost', 'request', request)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration)
    return {
        /**
         * Complete user registration by providing password with invitation token
         * @summary Accept invitation and complete registration
         * @param {ModelsAcceptInvitationRequest} request Invitation acceptance details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authAcceptInvitationPost(request: ModelsAcceptInvitationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAcceptInvitationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authAcceptInvitationPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authAcceptInvitationPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Authenticate user and return JWT token
         * @summary User login
         * @param {ModelsLoginRequest} request User login credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(request: ModelsLoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new user account with invitation token
         * @summary Register a new user
         * @param {ModelsRegisterRequest} request User registration details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRegisterPost(request: ModelsRegisterRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthRegisterPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRegisterPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthenticationApi.authRegisterPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthenticationApiFp(configuration)
    return {
        /**
         * Complete user registration by providing password with invitation token
         * @summary Accept invitation and complete registration
         * @param {AuthenticationApiAuthAcceptInvitationPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authAcceptInvitationPost(requestParameters: AuthenticationApiAuthAcceptInvitationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthAcceptInvitationPost200Response> {
            return localVarFp.authAcceptInvitationPost(requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Authenticate user and return JWT token
         * @summary User login
         * @param {AuthenticationApiAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(requestParameters: AuthenticationApiAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsLoginResponse> {
            return localVarFp.authLoginPost(requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user account with invitation token
         * @summary Register a new user
         * @param {AuthenticationApiAuthRegisterPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRegisterPost(requestParameters: AuthenticationApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthRegisterPost201Response> {
            return localVarFp.authRegisterPost(requestParameters.request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthenticationApi - interface
 * @export
 * @interface AuthenticationApi
 */
export interface AuthenticationApiInterface {
    /**
     * Complete user registration by providing password with invitation token
     * @summary Accept invitation and complete registration
     * @param {AuthenticationApiAuthAcceptInvitationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authAcceptInvitationPost(requestParameters: AuthenticationApiAuthAcceptInvitationPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthAcceptInvitationPost200Response>;

    /**
     * Authenticate user and return JWT token
     * @summary User login
     * @param {AuthenticationApiAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authLoginPost(requestParameters: AuthenticationApiAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsLoginResponse>;

    /**
     * Create a new user account with invitation token
     * @summary Register a new user
     * @param {AuthenticationApiAuthRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authRegisterPost(requestParameters: AuthenticationApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthRegisterPost201Response>;

}

/**
 * Request parameters for authAcceptInvitationPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthAcceptInvitationPostRequest
 */
export interface AuthenticationApiAuthAcceptInvitationPostRequest {
    /**
     * Invitation acceptance details
     * @type {ModelsAcceptInvitationRequest}
     * @memberof AuthenticationApiAuthAcceptInvitationPost
     */
    readonly request: ModelsAcceptInvitationRequest
}

/**
 * Request parameters for authLoginPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthLoginPostRequest
 */
export interface AuthenticationApiAuthLoginPostRequest {
    /**
     * User login credentials
     * @type {ModelsLoginRequest}
     * @memberof AuthenticationApiAuthLoginPost
     */
    readonly request: ModelsLoginRequest
}

/**
 * Request parameters for authRegisterPost operation in AuthenticationApi.
 * @export
 * @interface AuthenticationApiAuthRegisterPostRequest
 */
export interface AuthenticationApiAuthRegisterPostRequest {
    /**
     * User registration details
     * @type {ModelsRegisterRequest}
     * @memberof AuthenticationApiAuthRegisterPost
     */
    readonly request: ModelsRegisterRequest
}

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI implements AuthenticationApiInterface {
    /**
     * Complete user registration by providing password with invitation token
     * @summary Accept invitation and complete registration
     * @param {AuthenticationApiAuthAcceptInvitationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authAcceptInvitationPost(requestParameters: AuthenticationApiAuthAcceptInvitationPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authAcceptInvitationPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authenticate user and return JWT token
     * @summary User login
     * @param {AuthenticationApiAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authLoginPost(requestParameters: AuthenticationApiAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authLoginPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user account with invitation token
     * @summary Register a new user
     * @param {AuthenticationApiAuthRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApi
     */
    public authRegisterPost(requestParameters: AuthenticationApiAuthRegisterPostRequest, options?: RawAxiosRequestConfig) {
        return AuthenticationApiFp(this.configuration).authRegisterPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all categories for the authenticated user, optionally filtered by type
         * @summary Get user categories
         * @param {CategoriesGetTypeEnum} [type] Filter by category type
         * @param {boolean} [active] Filter by active status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet: async (type?: CategoriesGetTypeEnum, active?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Soft delete a category (deactivate it)
         * @summary Delete category
         * @param {string} id Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriesIdDelete', 'id', id)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific category by its ID
         * @summary Get category by ID
         * @param {string} id Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriesIdGet', 'id', id)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing category
         * @summary Update category
         * @param {string} id Category ID
         * @param {ModelsUpdateCategoryRequest} request Category update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesIdPut: async (id: string, request: ModelsUpdateCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('categoriesIdPut', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('categoriesIdPut', 'request', request)
            const localVarPath = `/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new income or expense category
         * @summary Create a new category
         * @param {ModelsCreateCategoryRequest} request Category data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesPost: async (request: ModelsCreateCategoryRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('categoriesPost', 'request', request)
            const localVarPath = `/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all categories for the authenticated user, optionally filtered by type
         * @summary Get user categories
         * @param {CategoriesGetTypeEnum} [type] Filter by category type
         * @param {boolean} [active] Filter by active status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesGet(type?: CategoriesGetTypeEnum, active?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsCategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesGet(type, active, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.categoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Soft delete a category (deactivate it)
         * @summary Delete category
         * @param {string} id Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAcceptInvitationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.categoriesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific category by its ID
         * @summary Get category by ID
         * @param {string} id Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.categoriesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing category
         * @summary Update category
         * @param {string} id Category ID
         * @param {ModelsUpdateCategoryRequest} request Category update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesIdPut(id: string, request: ModelsUpdateCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesIdPut(id, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.categoriesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new income or expense category
         * @summary Create a new category
         * @param {ModelsCreateCategoryRequest} request Category data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async categoriesPost(request: ModelsCreateCategoryRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsCategory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CategoriesApi.categoriesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoriesApiFp(configuration)
    return {
        /**
         * Get all categories for the authenticated user, optionally filtered by type
         * @summary Get user categories
         * @param {CategoriesApiCategoriesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesGet(requestParameters: CategoriesApiCategoriesGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCategoriesResponse> {
            return localVarFp.categoriesGet(requestParameters.type, requestParameters.active, options).then((request) => request(axios, basePath));
        },
        /**
         * Soft delete a category (deactivate it)
         * @summary Delete category
         * @param {CategoriesApiCategoriesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesIdDelete(requestParameters: CategoriesApiCategoriesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthAcceptInvitationPost200Response> {
            return localVarFp.categoriesIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific category by its ID
         * @summary Get category by ID
         * @param {CategoriesApiCategoriesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesIdGet(requestParameters: CategoriesApiCategoriesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCategory> {
            return localVarFp.categoriesIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing category
         * @summary Update category
         * @param {CategoriesApiCategoriesIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesIdPut(requestParameters: CategoriesApiCategoriesIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCategory> {
            return localVarFp.categoriesIdPut(requestParameters.id, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new income or expense category
         * @summary Create a new category
         * @param {CategoriesApiCategoriesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        categoriesPost(requestParameters: CategoriesApiCategoriesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCategory> {
            return localVarFp.categoriesPost(requestParameters.request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CategoriesApi - interface
 * @export
 * @interface CategoriesApi
 */
export interface CategoriesApiInterface {
    /**
     * Get all categories for the authenticated user, optionally filtered by type
     * @summary Get user categories
     * @param {CategoriesApiCategoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    categoriesGet(requestParameters?: CategoriesApiCategoriesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCategoriesResponse>;

    /**
     * Soft delete a category (deactivate it)
     * @summary Delete category
     * @param {CategoriesApiCategoriesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    categoriesIdDelete(requestParameters: CategoriesApiCategoriesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthAcceptInvitationPost200Response>;

    /**
     * Get a specific category by its ID
     * @summary Get category by ID
     * @param {CategoriesApiCategoriesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    categoriesIdGet(requestParameters: CategoriesApiCategoriesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCategory>;

    /**
     * Update an existing category
     * @summary Update category
     * @param {CategoriesApiCategoriesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    categoriesIdPut(requestParameters: CategoriesApiCategoriesIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCategory>;

    /**
     * Create a new income or expense category
     * @summary Create a new category
     * @param {CategoriesApiCategoriesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApiInterface
     */
    categoriesPost(requestParameters: CategoriesApiCategoriesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCategory>;

}

/**
 * Request parameters for categoriesGet operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesGetRequest
 */
export interface CategoriesApiCategoriesGetRequest {
    /**
     * Filter by category type
     * @type {'INCOME' | 'EXPENSE'}
     * @memberof CategoriesApiCategoriesGet
     */
    readonly type?: CategoriesGetTypeEnum

    /**
     * Filter by active status
     * @type {boolean}
     * @memberof CategoriesApiCategoriesGet
     */
    readonly active?: boolean
}

/**
 * Request parameters for categoriesIdDelete operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesIdDeleteRequest
 */
export interface CategoriesApiCategoriesIdDeleteRequest {
    /**
     * Category ID
     * @type {string}
     * @memberof CategoriesApiCategoriesIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for categoriesIdGet operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesIdGetRequest
 */
export interface CategoriesApiCategoriesIdGetRequest {
    /**
     * Category ID
     * @type {string}
     * @memberof CategoriesApiCategoriesIdGet
     */
    readonly id: string
}

/**
 * Request parameters for categoriesIdPut operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesIdPutRequest
 */
export interface CategoriesApiCategoriesIdPutRequest {
    /**
     * Category ID
     * @type {string}
     * @memberof CategoriesApiCategoriesIdPut
     */
    readonly id: string

    /**
     * Category update data
     * @type {ModelsUpdateCategoryRequest}
     * @memberof CategoriesApiCategoriesIdPut
     */
    readonly request: ModelsUpdateCategoryRequest
}

/**
 * Request parameters for categoriesPost operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesPostRequest
 */
export interface CategoriesApiCategoriesPostRequest {
    /**
     * Category data
     * @type {ModelsCreateCategoryRequest}
     * @memberof CategoriesApiCategoriesPost
     */
    readonly request: ModelsCreateCategoryRequest
}

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI implements CategoriesApiInterface {
    /**
     * Get all categories for the authenticated user, optionally filtered by type
     * @summary Get user categories
     * @param {CategoriesApiCategoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public categoriesGet(requestParameters: CategoriesApiCategoriesGetRequest = {}, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).categoriesGet(requestParameters.type, requestParameters.active, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Soft delete a category (deactivate it)
     * @summary Delete category
     * @param {CategoriesApiCategoriesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public categoriesIdDelete(requestParameters: CategoriesApiCategoriesIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).categoriesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific category by its ID
     * @summary Get category by ID
     * @param {CategoriesApiCategoriesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public categoriesIdGet(requestParameters: CategoriesApiCategoriesIdGetRequest, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).categoriesIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing category
     * @summary Update category
     * @param {CategoriesApiCategoriesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public categoriesIdPut(requestParameters: CategoriesApiCategoriesIdPutRequest, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).categoriesIdPut(requestParameters.id, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new income or expense category
     * @summary Create a new category
     * @param {CategoriesApiCategoriesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoriesApi
     */
    public categoriesPost(requestParameters: CategoriesApiCategoriesPostRequest, options?: RawAxiosRequestConfig) {
        return CategoriesApiFp(this.configuration).categoriesPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CategoriesGetTypeEnum = {
    Income: 'INCOME',
    Expense: 'EXPENSE'
} as const;
export type CategoriesGetTypeEnum = typeof CategoriesGetTypeEnum[keyof typeof CategoriesGetTypeEnum];


/**
 * PropertiesApi - axios parameter creator
 * @export
 */
export const PropertiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all properties for the authenticated user with optional balance information
         * @summary Get all properties
         * @param {boolean} [withBalance] Include balance information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGet: async (withBalance?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/properties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (withBalance !== undefined) {
                localVarQueryParameter['with_balance'] = withBalance;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Soft delete a property by ID
         * @summary Delete property
         * @param {string} id Property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('propertiesIdDelete', 'id', id)
            const localVarPath = `/properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific property by ID with optional balance information
         * @summary Get property by ID
         * @param {string} id Property ID
         * @param {boolean} [withBalance] Include balance information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesIdGet: async (id: string, withBalance?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('propertiesIdGet', 'id', id)
            const localVarPath = `/properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (withBalance !== undefined) {
                localVarQueryParameter['with_balance'] = withBalance;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific property by ID
         * @summary Update property
         * @param {string} id Property ID
         * @param {ModelsUpdatePropertyRequest} property Property update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesIdPut: async (id: string, property: ModelsUpdatePropertyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('propertiesIdPut', 'id', id)
            // verify required parameter 'property' is not null or undefined
            assertParamExists('propertiesIdPut', 'property', property)
            const localVarPath = `/properties/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(property, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new real estate property
         * @summary Create a new property
         * @param {ModelsCreatePropertyRequest} property Property data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesPost: async (property: ModelsCreatePropertyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'property' is not null or undefined
            assertParamExists('propertiesPost', 'property', property)
            const localVarPath = `/properties`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(property, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PropertiesApi - functional programming interface
 * @export
 */
export const PropertiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PropertiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all properties for the authenticated user with optional balance information
         * @summary Get all properties
         * @param {boolean} [withBalance] Include balance information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesGet(withBalance?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PropertiesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesGet(withBalance, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PropertiesApi.propertiesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Soft delete a property by ID
         * @summary Delete property
         * @param {string} id Property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAcceptInvitationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PropertiesApi.propertiesIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific property by ID with optional balance information
         * @summary Get property by ID
         * @param {string} id Property ID
         * @param {boolean} [withBalance] Include balance information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesIdGet(id: string, withBalance?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsPropertyWithBalance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesIdGet(id, withBalance, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PropertiesApi.propertiesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a specific property by ID
         * @summary Update property
         * @param {string} id Property ID
         * @param {ModelsUpdatePropertyRequest} property Property update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesIdPut(id: string, property: ModelsUpdatePropertyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsProperty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesIdPut(id, property, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PropertiesApi.propertiesIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new real estate property
         * @summary Create a new property
         * @param {ModelsCreatePropertyRequest} property Property data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async propertiesPost(property: ModelsCreatePropertyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsProperty>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.propertiesPost(property, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PropertiesApi.propertiesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PropertiesApi - factory interface
 * @export
 */
export const PropertiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PropertiesApiFp(configuration)
    return {
        /**
         * Get all properties for the authenticated user with optional balance information
         * @summary Get all properties
         * @param {PropertiesApiPropertiesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesGet(requestParameters: PropertiesApiPropertiesGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PropertiesGet200Response> {
            return localVarFp.propertiesGet(requestParameters.withBalance, options).then((request) => request(axios, basePath));
        },
        /**
         * Soft delete a property by ID
         * @summary Delete property
         * @param {PropertiesApiPropertiesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesIdDelete(requestParameters: PropertiesApiPropertiesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthAcceptInvitationPost200Response> {
            return localVarFp.propertiesIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific property by ID with optional balance information
         * @summary Get property by ID
         * @param {PropertiesApiPropertiesIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesIdGet(requestParameters: PropertiesApiPropertiesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsPropertyWithBalance> {
            return localVarFp.propertiesIdGet(requestParameters.id, requestParameters.withBalance, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific property by ID
         * @summary Update property
         * @param {PropertiesApiPropertiesIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesIdPut(requestParameters: PropertiesApiPropertiesIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsProperty> {
            return localVarFp.propertiesIdPut(requestParameters.id, requestParameters.property, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new real estate property
         * @summary Create a new property
         * @param {PropertiesApiPropertiesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        propertiesPost(requestParameters: PropertiesApiPropertiesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsProperty> {
            return localVarFp.propertiesPost(requestParameters.property, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PropertiesApi - interface
 * @export
 * @interface PropertiesApi
 */
export interface PropertiesApiInterface {
    /**
     * Get all properties for the authenticated user with optional balance information
     * @summary Get all properties
     * @param {PropertiesApiPropertiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApiInterface
     */
    propertiesGet(requestParameters?: PropertiesApiPropertiesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PropertiesGet200Response>;

    /**
     * Soft delete a property by ID
     * @summary Delete property
     * @param {PropertiesApiPropertiesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApiInterface
     */
    propertiesIdDelete(requestParameters: PropertiesApiPropertiesIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthAcceptInvitationPost200Response>;

    /**
     * Get a specific property by ID with optional balance information
     * @summary Get property by ID
     * @param {PropertiesApiPropertiesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApiInterface
     */
    propertiesIdGet(requestParameters: PropertiesApiPropertiesIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsPropertyWithBalance>;

    /**
     * Update a specific property by ID
     * @summary Update property
     * @param {PropertiesApiPropertiesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApiInterface
     */
    propertiesIdPut(requestParameters: PropertiesApiPropertiesIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsProperty>;

    /**
     * Create a new real estate property
     * @summary Create a new property
     * @param {PropertiesApiPropertiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApiInterface
     */
    propertiesPost(requestParameters: PropertiesApiPropertiesPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsProperty>;

}

/**
 * Request parameters for propertiesGet operation in PropertiesApi.
 * @export
 * @interface PropertiesApiPropertiesGetRequest
 */
export interface PropertiesApiPropertiesGetRequest {
    /**
     * Include balance information
     * @type {boolean}
     * @memberof PropertiesApiPropertiesGet
     */
    readonly withBalance?: boolean
}

/**
 * Request parameters for propertiesIdDelete operation in PropertiesApi.
 * @export
 * @interface PropertiesApiPropertiesIdDeleteRequest
 */
export interface PropertiesApiPropertiesIdDeleteRequest {
    /**
     * Property ID
     * @type {string}
     * @memberof PropertiesApiPropertiesIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for propertiesIdGet operation in PropertiesApi.
 * @export
 * @interface PropertiesApiPropertiesIdGetRequest
 */
export interface PropertiesApiPropertiesIdGetRequest {
    /**
     * Property ID
     * @type {string}
     * @memberof PropertiesApiPropertiesIdGet
     */
    readonly id: string

    /**
     * Include balance information
     * @type {boolean}
     * @memberof PropertiesApiPropertiesIdGet
     */
    readonly withBalance?: boolean
}

/**
 * Request parameters for propertiesIdPut operation in PropertiesApi.
 * @export
 * @interface PropertiesApiPropertiesIdPutRequest
 */
export interface PropertiesApiPropertiesIdPutRequest {
    /**
     * Property ID
     * @type {string}
     * @memberof PropertiesApiPropertiesIdPut
     */
    readonly id: string

    /**
     * Property update data
     * @type {ModelsUpdatePropertyRequest}
     * @memberof PropertiesApiPropertiesIdPut
     */
    readonly property: ModelsUpdatePropertyRequest
}

/**
 * Request parameters for propertiesPost operation in PropertiesApi.
 * @export
 * @interface PropertiesApiPropertiesPostRequest
 */
export interface PropertiesApiPropertiesPostRequest {
    /**
     * Property data
     * @type {ModelsCreatePropertyRequest}
     * @memberof PropertiesApiPropertiesPost
     */
    readonly property: ModelsCreatePropertyRequest
}

/**
 * PropertiesApi - object-oriented interface
 * @export
 * @class PropertiesApi
 * @extends {BaseAPI}
 */
export class PropertiesApi extends BaseAPI implements PropertiesApiInterface {
    /**
     * Get all properties for the authenticated user with optional balance information
     * @summary Get all properties
     * @param {PropertiesApiPropertiesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public propertiesGet(requestParameters: PropertiesApiPropertiesGetRequest = {}, options?: RawAxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).propertiesGet(requestParameters.withBalance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Soft delete a property by ID
     * @summary Delete property
     * @param {PropertiesApiPropertiesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public propertiesIdDelete(requestParameters: PropertiesApiPropertiesIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).propertiesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific property by ID with optional balance information
     * @summary Get property by ID
     * @param {PropertiesApiPropertiesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public propertiesIdGet(requestParameters: PropertiesApiPropertiesIdGetRequest, options?: RawAxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).propertiesIdGet(requestParameters.id, requestParameters.withBalance, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific property by ID
     * @summary Update property
     * @param {PropertiesApiPropertiesIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public propertiesIdPut(requestParameters: PropertiesApiPropertiesIdPutRequest, options?: RawAxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).propertiesIdPut(requestParameters.id, requestParameters.property, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new real estate property
     * @summary Create a new property
     * @param {PropertiesApiPropertiesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApi
     */
    public propertiesPost(requestParameters: PropertiesApiPropertiesPostRequest, options?: RawAxiosRequestConfig) {
        return PropertiesApiFp(this.configuration).propertiesPost(requestParameters.property, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RealEstateStatsApi - axios parameter creator
 * @export
 */
export const RealEstateStatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get lifetime real estate income/expense statistics, optionally filtered by property
         * @summary Get lifetime real estate statistics
         * @param {string} [propertyId] Filter by specific property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateStatsLifetimeGet: async (propertyId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/real-estate/stats/lifetime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (propertyId !== undefined) {
                localVarQueryParameter['property_id'] = propertyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get monthly real estate income/expense statistics, optionally filtered by property
         * @summary Get monthly real estate statistics
         * @param {number} year Year
         * @param {number} month Month (1-12)
         * @param {string} [propertyId] Filter by specific property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateStatsMonthlyGet: async (year: number, month: number, propertyId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('realEstateStatsMonthlyGet', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('realEstateStatsMonthlyGet', 'month', month)
            const localVarPath = `/real-estate/stats/monthly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (propertyId !== undefined) {
                localVarQueryParameter['property_id'] = propertyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get yearly real estate income/expense statistics broken down by month
         * @summary Get yearly real estate statistics
         * @param {number} year Year
         * @param {string} [propertyId] Filter by specific property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateStatsYearlyGet: async (year: number, propertyId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('realEstateStatsYearlyGet', 'year', year)
            const localVarPath = `/real-estate/stats/yearly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (propertyId !== undefined) {
                localVarQueryParameter['property_id'] = propertyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RealEstateStatsApi - functional programming interface
 * @export
 */
export const RealEstateStatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RealEstateStatsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get lifetime real estate income/expense statistics, optionally filtered by property
         * @summary Get lifetime real estate statistics
         * @param {string} [propertyId] Filter by specific property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realEstateStatsLifetimeGet(propertyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealEstateStatsLifetimeGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realEstateStatsLifetimeGet(propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealEstateStatsApi.realEstateStatsLifetimeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get monthly real estate income/expense statistics, optionally filtered by property
         * @summary Get monthly real estate statistics
         * @param {number} year Year
         * @param {number} month Month (1-12)
         * @param {string} [propertyId] Filter by specific property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realEstateStatsMonthlyGet(year: number, month: number, propertyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealEstateStatsMonthlyGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realEstateStatsMonthlyGet(year, month, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealEstateStatsApi.realEstateStatsMonthlyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get yearly real estate income/expense statistics broken down by month
         * @summary Get yearly real estate statistics
         * @param {number} year Year
         * @param {string} [propertyId] Filter by specific property ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realEstateStatsYearlyGet(year: number, propertyId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealEstateStatsYearlyGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realEstateStatsYearlyGet(year, propertyId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealEstateStatsApi.realEstateStatsYearlyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RealEstateStatsApi - factory interface
 * @export
 */
export const RealEstateStatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RealEstateStatsApiFp(configuration)
    return {
        /**
         * Get lifetime real estate income/expense statistics, optionally filtered by property
         * @summary Get lifetime real estate statistics
         * @param {RealEstateStatsApiRealEstateStatsLifetimeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateStatsLifetimeGet(requestParameters: RealEstateStatsApiRealEstateStatsLifetimeGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<RealEstateStatsLifetimeGet200Response> {
            return localVarFp.realEstateStatsLifetimeGet(requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get monthly real estate income/expense statistics, optionally filtered by property
         * @summary Get monthly real estate statistics
         * @param {RealEstateStatsApiRealEstateStatsMonthlyGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateStatsMonthlyGet(requestParameters: RealEstateStatsApiRealEstateStatsMonthlyGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<RealEstateStatsMonthlyGet200Response> {
            return localVarFp.realEstateStatsMonthlyGet(requestParameters.year, requestParameters.month, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get yearly real estate income/expense statistics broken down by month
         * @summary Get yearly real estate statistics
         * @param {RealEstateStatsApiRealEstateStatsYearlyGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateStatsYearlyGet(requestParameters: RealEstateStatsApiRealEstateStatsYearlyGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<RealEstateStatsYearlyGet200Response> {
            return localVarFp.realEstateStatsYearlyGet(requestParameters.year, requestParameters.propertyId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RealEstateStatsApi - interface
 * @export
 * @interface RealEstateStatsApi
 */
export interface RealEstateStatsApiInterface {
    /**
     * Get lifetime real estate income/expense statistics, optionally filtered by property
     * @summary Get lifetime real estate statistics
     * @param {RealEstateStatsApiRealEstateStatsLifetimeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateStatsApiInterface
     */
    realEstateStatsLifetimeGet(requestParameters?: RealEstateStatsApiRealEstateStatsLifetimeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<RealEstateStatsLifetimeGet200Response>;

    /**
     * Get monthly real estate income/expense statistics, optionally filtered by property
     * @summary Get monthly real estate statistics
     * @param {RealEstateStatsApiRealEstateStatsMonthlyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateStatsApiInterface
     */
    realEstateStatsMonthlyGet(requestParameters: RealEstateStatsApiRealEstateStatsMonthlyGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<RealEstateStatsMonthlyGet200Response>;

    /**
     * Get yearly real estate income/expense statistics broken down by month
     * @summary Get yearly real estate statistics
     * @param {RealEstateStatsApiRealEstateStatsYearlyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateStatsApiInterface
     */
    realEstateStatsYearlyGet(requestParameters: RealEstateStatsApiRealEstateStatsYearlyGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<RealEstateStatsYearlyGet200Response>;

}

/**
 * Request parameters for realEstateStatsLifetimeGet operation in RealEstateStatsApi.
 * @export
 * @interface RealEstateStatsApiRealEstateStatsLifetimeGetRequest
 */
export interface RealEstateStatsApiRealEstateStatsLifetimeGetRequest {
    /**
     * Filter by specific property ID
     * @type {string}
     * @memberof RealEstateStatsApiRealEstateStatsLifetimeGet
     */
    readonly propertyId?: string
}

/**
 * Request parameters for realEstateStatsMonthlyGet operation in RealEstateStatsApi.
 * @export
 * @interface RealEstateStatsApiRealEstateStatsMonthlyGetRequest
 */
export interface RealEstateStatsApiRealEstateStatsMonthlyGetRequest {
    /**
     * Year
     * @type {number}
     * @memberof RealEstateStatsApiRealEstateStatsMonthlyGet
     */
    readonly year: number

    /**
     * Month (1-12)
     * @type {number}
     * @memberof RealEstateStatsApiRealEstateStatsMonthlyGet
     */
    readonly month: number

    /**
     * Filter by specific property ID
     * @type {string}
     * @memberof RealEstateStatsApiRealEstateStatsMonthlyGet
     */
    readonly propertyId?: string
}

/**
 * Request parameters for realEstateStatsYearlyGet operation in RealEstateStatsApi.
 * @export
 * @interface RealEstateStatsApiRealEstateStatsYearlyGetRequest
 */
export interface RealEstateStatsApiRealEstateStatsYearlyGetRequest {
    /**
     * Year
     * @type {number}
     * @memberof RealEstateStatsApiRealEstateStatsYearlyGet
     */
    readonly year: number

    /**
     * Filter by specific property ID
     * @type {string}
     * @memberof RealEstateStatsApiRealEstateStatsYearlyGet
     */
    readonly propertyId?: string
}

/**
 * RealEstateStatsApi - object-oriented interface
 * @export
 * @class RealEstateStatsApi
 * @extends {BaseAPI}
 */
export class RealEstateStatsApi extends BaseAPI implements RealEstateStatsApiInterface {
    /**
     * Get lifetime real estate income/expense statistics, optionally filtered by property
     * @summary Get lifetime real estate statistics
     * @param {RealEstateStatsApiRealEstateStatsLifetimeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateStatsApi
     */
    public realEstateStatsLifetimeGet(requestParameters: RealEstateStatsApiRealEstateStatsLifetimeGetRequest = {}, options?: RawAxiosRequestConfig) {
        return RealEstateStatsApiFp(this.configuration).realEstateStatsLifetimeGet(requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get monthly real estate income/expense statistics, optionally filtered by property
     * @summary Get monthly real estate statistics
     * @param {RealEstateStatsApiRealEstateStatsMonthlyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateStatsApi
     */
    public realEstateStatsMonthlyGet(requestParameters: RealEstateStatsApiRealEstateStatsMonthlyGetRequest, options?: RawAxiosRequestConfig) {
        return RealEstateStatsApiFp(this.configuration).realEstateStatsMonthlyGet(requestParameters.year, requestParameters.month, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get yearly real estate income/expense statistics broken down by month
     * @summary Get yearly real estate statistics
     * @param {RealEstateStatsApiRealEstateStatsYearlyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateStatsApi
     */
    public realEstateStatsYearlyGet(requestParameters: RealEstateStatsApiRealEstateStatsYearlyGetRequest, options?: RawAxiosRequestConfig) {
        return RealEstateStatsApiFp(this.configuration).realEstateStatsYearlyGet(requestParameters.year, requestParameters.propertyId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RealEstateTransactionsApi - axios parameter creator
 * @export
 */
export const RealEstateTransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get real estate transactions with optional filtering by property
         * @summary Get real estate transactions
         * @param {string} [propertyId] Filter by property ID
         * @param {string} [type] Filter by type (INCOME/EXPENSE)
         * @param {number} [limit] Limit results (default: 20)
         * @param {number} [offset] Offset for pagination (default: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateTransactionsGet: async (propertyId?: string, type?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/real-estate-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (propertyId !== undefined) {
                localVarQueryParameter['property_id'] = propertyId;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Soft delete a real estate transaction by ID
         * @summary Delete real estate transaction
         * @param {string} id Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateTransactionsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('realEstateTransactionsIdDelete', 'id', id)
            const localVarPath = `/real-estate-transactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific real estate transaction by ID
         * @summary Get real estate transaction by ID
         * @param {string} id Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateTransactionsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('realEstateTransactionsIdGet', 'id', id)
            const localVarPath = `/real-estate-transactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific real estate transaction by ID
         * @summary Update real estate transaction
         * @param {string} id Transaction ID
         * @param {ModelsUpdateRealEstateTransactionRequest} transaction Transaction update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateTransactionsIdPut: async (id: string, transaction: ModelsUpdateRealEstateTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('realEstateTransactionsIdPut', 'id', id)
            // verify required parameter 'transaction' is not null or undefined
            assertParamExists('realEstateTransactionsIdPut', 'transaction', transaction)
            const localVarPath = `/real-estate-transactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transaction, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new income or expense transaction for a property
         * @summary Create a new real estate transaction
         * @param {ModelsCreateRealEstateTransactionRequest} transaction Real estate transaction data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateTransactionsPost: async (transaction: ModelsCreateRealEstateTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transaction' is not null or undefined
            assertParamExists('realEstateTransactionsPost', 'transaction', transaction)
            const localVarPath = `/real-estate-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(transaction, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RealEstateTransactionsApi - functional programming interface
 * @export
 */
export const RealEstateTransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RealEstateTransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get real estate transactions with optional filtering by property
         * @summary Get real estate transactions
         * @param {string} [propertyId] Filter by property ID
         * @param {string} [type] Filter by type (INCOME/EXPENSE)
         * @param {number} [limit] Limit results (default: 20)
         * @param {number} [offset] Offset for pagination (default: 0)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realEstateTransactionsGet(propertyId?: string, type?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RealEstateTransactionsGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realEstateTransactionsGet(propertyId, type, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealEstateTransactionsApi.realEstateTransactionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Soft delete a real estate transaction by ID
         * @summary Delete real estate transaction
         * @param {string} id Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realEstateTransactionsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAcceptInvitationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realEstateTransactionsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealEstateTransactionsApi.realEstateTransactionsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific real estate transaction by ID
         * @summary Get real estate transaction by ID
         * @param {string} id Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realEstateTransactionsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsRealEstateTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realEstateTransactionsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealEstateTransactionsApi.realEstateTransactionsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update a specific real estate transaction by ID
         * @summary Update real estate transaction
         * @param {string} id Transaction ID
         * @param {ModelsUpdateRealEstateTransactionRequest} transaction Transaction update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realEstateTransactionsIdPut(id: string, transaction: ModelsUpdateRealEstateTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsRealEstateTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realEstateTransactionsIdPut(id, transaction, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealEstateTransactionsApi.realEstateTransactionsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new income or expense transaction for a property
         * @summary Create a new real estate transaction
         * @param {ModelsCreateRealEstateTransactionRequest} transaction Real estate transaction data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async realEstateTransactionsPost(transaction: ModelsCreateRealEstateTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsRealEstateTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.realEstateTransactionsPost(transaction, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['RealEstateTransactionsApi.realEstateTransactionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * RealEstateTransactionsApi - factory interface
 * @export
 */
export const RealEstateTransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RealEstateTransactionsApiFp(configuration)
    return {
        /**
         * Get real estate transactions with optional filtering by property
         * @summary Get real estate transactions
         * @param {RealEstateTransactionsApiRealEstateTransactionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateTransactionsGet(requestParameters: RealEstateTransactionsApiRealEstateTransactionsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<RealEstateTransactionsGet200Response> {
            return localVarFp.realEstateTransactionsGet(requestParameters.propertyId, requestParameters.type, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Soft delete a real estate transaction by ID
         * @summary Delete real estate transaction
         * @param {RealEstateTransactionsApiRealEstateTransactionsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateTransactionsIdDelete(requestParameters: RealEstateTransactionsApiRealEstateTransactionsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthAcceptInvitationPost200Response> {
            return localVarFp.realEstateTransactionsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific real estate transaction by ID
         * @summary Get real estate transaction by ID
         * @param {RealEstateTransactionsApiRealEstateTransactionsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateTransactionsIdGet(requestParameters: RealEstateTransactionsApiRealEstateTransactionsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsRealEstateTransaction> {
            return localVarFp.realEstateTransactionsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific real estate transaction by ID
         * @summary Update real estate transaction
         * @param {RealEstateTransactionsApiRealEstateTransactionsIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateTransactionsIdPut(requestParameters: RealEstateTransactionsApiRealEstateTransactionsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsRealEstateTransaction> {
            return localVarFp.realEstateTransactionsIdPut(requestParameters.id, requestParameters.transaction, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new income or expense transaction for a property
         * @summary Create a new real estate transaction
         * @param {RealEstateTransactionsApiRealEstateTransactionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        realEstateTransactionsPost(requestParameters: RealEstateTransactionsApiRealEstateTransactionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsRealEstateTransaction> {
            return localVarFp.realEstateTransactionsPost(requestParameters.transaction, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RealEstateTransactionsApi - interface
 * @export
 * @interface RealEstateTransactionsApi
 */
export interface RealEstateTransactionsApiInterface {
    /**
     * Get real estate transactions with optional filtering by property
     * @summary Get real estate transactions
     * @param {RealEstateTransactionsApiRealEstateTransactionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateTransactionsApiInterface
     */
    realEstateTransactionsGet(requestParameters?: RealEstateTransactionsApiRealEstateTransactionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<RealEstateTransactionsGet200Response>;

    /**
     * Soft delete a real estate transaction by ID
     * @summary Delete real estate transaction
     * @param {RealEstateTransactionsApiRealEstateTransactionsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateTransactionsApiInterface
     */
    realEstateTransactionsIdDelete(requestParameters: RealEstateTransactionsApiRealEstateTransactionsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthAcceptInvitationPost200Response>;

    /**
     * Get a specific real estate transaction by ID
     * @summary Get real estate transaction by ID
     * @param {RealEstateTransactionsApiRealEstateTransactionsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateTransactionsApiInterface
     */
    realEstateTransactionsIdGet(requestParameters: RealEstateTransactionsApiRealEstateTransactionsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsRealEstateTransaction>;

    /**
     * Update a specific real estate transaction by ID
     * @summary Update real estate transaction
     * @param {RealEstateTransactionsApiRealEstateTransactionsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateTransactionsApiInterface
     */
    realEstateTransactionsIdPut(requestParameters: RealEstateTransactionsApiRealEstateTransactionsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsRealEstateTransaction>;

    /**
     * Create a new income or expense transaction for a property
     * @summary Create a new real estate transaction
     * @param {RealEstateTransactionsApiRealEstateTransactionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateTransactionsApiInterface
     */
    realEstateTransactionsPost(requestParameters: RealEstateTransactionsApiRealEstateTransactionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsRealEstateTransaction>;

}

/**
 * Request parameters for realEstateTransactionsGet operation in RealEstateTransactionsApi.
 * @export
 * @interface RealEstateTransactionsApiRealEstateTransactionsGetRequest
 */
export interface RealEstateTransactionsApiRealEstateTransactionsGetRequest {
    /**
     * Filter by property ID
     * @type {string}
     * @memberof RealEstateTransactionsApiRealEstateTransactionsGet
     */
    readonly propertyId?: string

    /**
     * Filter by type (INCOME/EXPENSE)
     * @type {string}
     * @memberof RealEstateTransactionsApiRealEstateTransactionsGet
     */
    readonly type?: string

    /**
     * Limit results (default: 20)
     * @type {number}
     * @memberof RealEstateTransactionsApiRealEstateTransactionsGet
     */
    readonly limit?: number

    /**
     * Offset for pagination (default: 0)
     * @type {number}
     * @memberof RealEstateTransactionsApiRealEstateTransactionsGet
     */
    readonly offset?: number
}

/**
 * Request parameters for realEstateTransactionsIdDelete operation in RealEstateTransactionsApi.
 * @export
 * @interface RealEstateTransactionsApiRealEstateTransactionsIdDeleteRequest
 */
export interface RealEstateTransactionsApiRealEstateTransactionsIdDeleteRequest {
    /**
     * Transaction ID
     * @type {string}
     * @memberof RealEstateTransactionsApiRealEstateTransactionsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for realEstateTransactionsIdGet operation in RealEstateTransactionsApi.
 * @export
 * @interface RealEstateTransactionsApiRealEstateTransactionsIdGetRequest
 */
export interface RealEstateTransactionsApiRealEstateTransactionsIdGetRequest {
    /**
     * Transaction ID
     * @type {string}
     * @memberof RealEstateTransactionsApiRealEstateTransactionsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for realEstateTransactionsIdPut operation in RealEstateTransactionsApi.
 * @export
 * @interface RealEstateTransactionsApiRealEstateTransactionsIdPutRequest
 */
export interface RealEstateTransactionsApiRealEstateTransactionsIdPutRequest {
    /**
     * Transaction ID
     * @type {string}
     * @memberof RealEstateTransactionsApiRealEstateTransactionsIdPut
     */
    readonly id: string

    /**
     * Transaction update data
     * @type {ModelsUpdateRealEstateTransactionRequest}
     * @memberof RealEstateTransactionsApiRealEstateTransactionsIdPut
     */
    readonly transaction: ModelsUpdateRealEstateTransactionRequest
}

/**
 * Request parameters for realEstateTransactionsPost operation in RealEstateTransactionsApi.
 * @export
 * @interface RealEstateTransactionsApiRealEstateTransactionsPostRequest
 */
export interface RealEstateTransactionsApiRealEstateTransactionsPostRequest {
    /**
     * Real estate transaction data
     * @type {ModelsCreateRealEstateTransactionRequest}
     * @memberof RealEstateTransactionsApiRealEstateTransactionsPost
     */
    readonly transaction: ModelsCreateRealEstateTransactionRequest
}

/**
 * RealEstateTransactionsApi - object-oriented interface
 * @export
 * @class RealEstateTransactionsApi
 * @extends {BaseAPI}
 */
export class RealEstateTransactionsApi extends BaseAPI implements RealEstateTransactionsApiInterface {
    /**
     * Get real estate transactions with optional filtering by property
     * @summary Get real estate transactions
     * @param {RealEstateTransactionsApiRealEstateTransactionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateTransactionsApi
     */
    public realEstateTransactionsGet(requestParameters: RealEstateTransactionsApiRealEstateTransactionsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return RealEstateTransactionsApiFp(this.configuration).realEstateTransactionsGet(requestParameters.propertyId, requestParameters.type, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Soft delete a real estate transaction by ID
     * @summary Delete real estate transaction
     * @param {RealEstateTransactionsApiRealEstateTransactionsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateTransactionsApi
     */
    public realEstateTransactionsIdDelete(requestParameters: RealEstateTransactionsApiRealEstateTransactionsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return RealEstateTransactionsApiFp(this.configuration).realEstateTransactionsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific real estate transaction by ID
     * @summary Get real estate transaction by ID
     * @param {RealEstateTransactionsApiRealEstateTransactionsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateTransactionsApi
     */
    public realEstateTransactionsIdGet(requestParameters: RealEstateTransactionsApiRealEstateTransactionsIdGetRequest, options?: RawAxiosRequestConfig) {
        return RealEstateTransactionsApiFp(this.configuration).realEstateTransactionsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific real estate transaction by ID
     * @summary Update real estate transaction
     * @param {RealEstateTransactionsApiRealEstateTransactionsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateTransactionsApi
     */
    public realEstateTransactionsIdPut(requestParameters: RealEstateTransactionsApiRealEstateTransactionsIdPutRequest, options?: RawAxiosRequestConfig) {
        return RealEstateTransactionsApiFp(this.configuration).realEstateTransactionsIdPut(requestParameters.id, requestParameters.transaction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new income or expense transaction for a property
     * @summary Create a new real estate transaction
     * @param {RealEstateTransactionsApiRealEstateTransactionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RealEstateTransactionsApi
     */
    public realEstateTransactionsPost(requestParameters: RealEstateTransactionsApiRealEstateTransactionsPostRequest, options?: RawAxiosRequestConfig) {
        return RealEstateTransactionsApiFp(this.configuration).realEstateTransactionsPost(requestParameters.transaction, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * StatisticsApi - axios parameter creator
 * @export
 */
export const StatisticsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get category breakdown for a specific date range
         * @summary Get category statistics
         * @param {string} fromDate Start date (YYYY-MM-DD)
         * @param {string} toDate End date (YYYY-MM-DD)
         * @param {StatsCategoriesGetTypeEnum} [type] Filter by transaction type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsCategoriesGet: async (fromDate: string, toDate: string, type?: StatsCategoriesGetTypeEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromDate' is not null or undefined
            assertParamExists('statsCategoriesGet', 'fromDate', fromDate)
            // verify required parameter 'toDate' is not null or undefined
            assertParamExists('statsCategoriesGet', 'toDate', toDate)
            const localVarPath = `/stats/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = toDate;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get income, expense and net statistics for a specific month
         * @summary Get monthly statistics
         * @param {number} year Year
         * @param {number} month Month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsMonthlyGet: async (year: number, month: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('statsMonthlyGet', 'year', year)
            // verify required parameter 'month' is not null or undefined
            assertParamExists('statsMonthlyGet', 'month', month)
            const localVarPath = `/stats/monthly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get monthly breakdown statistics for an entire year
         * @summary Get yearly overview
         * @param {number} year Year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsYearlyGet: async (year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('statsYearlyGet', 'year', year)
            const localVarPath = `/stats/yearly`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatisticsApi - functional programming interface
 * @export
 */
export const StatisticsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatisticsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get category breakdown for a specific date range
         * @summary Get category statistics
         * @param {string} fromDate Start date (YYYY-MM-DD)
         * @param {string} toDate End date (YYYY-MM-DD)
         * @param {StatsCategoriesGetTypeEnum} [type] Filter by transaction type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statsCategoriesGet(fromDate: string, toDate: string, type?: StatsCategoriesGetTypeEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsCategoriesGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statsCategoriesGet(fromDate, toDate, type, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatisticsApi.statsCategoriesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get income, expense and net statistics for a specific month
         * @summary Get monthly statistics
         * @param {number} year Year
         * @param {number} month Month
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statsMonthlyGet(year: number, month: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statsMonthlyGet(year, month, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatisticsApi.statsMonthlyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get monthly breakdown statistics for an entire year
         * @summary Get yearly overview
         * @param {number} year Year
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statsYearlyGet(year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatsYearlyGet200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statsYearlyGet(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatisticsApi.statsYearlyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StatisticsApi - factory interface
 * @export
 */
export const StatisticsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatisticsApiFp(configuration)
    return {
        /**
         * Get category breakdown for a specific date range
         * @summary Get category statistics
         * @param {StatisticsApiStatsCategoriesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsCategoriesGet(requestParameters: StatisticsApiStatsCategoriesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatsCategoriesGet200Response> {
            return localVarFp.statsCategoriesGet(requestParameters.fromDate, requestParameters.toDate, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * Get income, expense and net statistics for a specific month
         * @summary Get monthly statistics
         * @param {StatisticsApiStatsMonthlyGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsMonthlyGet(requestParameters: StatisticsApiStatsMonthlyGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsStatsResponse> {
            return localVarFp.statsMonthlyGet(requestParameters.year, requestParameters.month, options).then((request) => request(axios, basePath));
        },
        /**
         * Get monthly breakdown statistics for an entire year
         * @summary Get yearly overview
         * @param {StatisticsApiStatsYearlyGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsYearlyGet(requestParameters: StatisticsApiStatsYearlyGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatsYearlyGet200Response> {
            return localVarFp.statsYearlyGet(requestParameters.year, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatisticsApi - interface
 * @export
 * @interface StatisticsApi
 */
export interface StatisticsApiInterface {
    /**
     * Get category breakdown for a specific date range
     * @summary Get category statistics
     * @param {StatisticsApiStatsCategoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statsCategoriesGet(requestParameters: StatisticsApiStatsCategoriesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatsCategoriesGet200Response>;

    /**
     * Get income, expense and net statistics for a specific month
     * @summary Get monthly statistics
     * @param {StatisticsApiStatsMonthlyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statsMonthlyGet(requestParameters: StatisticsApiStatsMonthlyGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsStatsResponse>;

    /**
     * Get monthly breakdown statistics for an entire year
     * @summary Get yearly overview
     * @param {StatisticsApiStatsYearlyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApiInterface
     */
    statsYearlyGet(requestParameters: StatisticsApiStatsYearlyGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StatsYearlyGet200Response>;

}

/**
 * Request parameters for statsCategoriesGet operation in StatisticsApi.
 * @export
 * @interface StatisticsApiStatsCategoriesGetRequest
 */
export interface StatisticsApiStatsCategoriesGetRequest {
    /**
     * Start date (YYYY-MM-DD)
     * @type {string}
     * @memberof StatisticsApiStatsCategoriesGet
     */
    readonly fromDate: string

    /**
     * End date (YYYY-MM-DD)
     * @type {string}
     * @memberof StatisticsApiStatsCategoriesGet
     */
    readonly toDate: string

    /**
     * Filter by transaction type
     * @type {'INCOME' | 'EXPENSE'}
     * @memberof StatisticsApiStatsCategoriesGet
     */
    readonly type?: StatsCategoriesGetTypeEnum
}

/**
 * Request parameters for statsMonthlyGet operation in StatisticsApi.
 * @export
 * @interface StatisticsApiStatsMonthlyGetRequest
 */
export interface StatisticsApiStatsMonthlyGetRequest {
    /**
     * Year
     * @type {number}
     * @memberof StatisticsApiStatsMonthlyGet
     */
    readonly year: number

    /**
     * Month
     * @type {number}
     * @memberof StatisticsApiStatsMonthlyGet
     */
    readonly month: number
}

/**
 * Request parameters for statsYearlyGet operation in StatisticsApi.
 * @export
 * @interface StatisticsApiStatsYearlyGetRequest
 */
export interface StatisticsApiStatsYearlyGetRequest {
    /**
     * Year
     * @type {number}
     * @memberof StatisticsApiStatsYearlyGet
     */
    readonly year: number
}

/**
 * StatisticsApi - object-oriented interface
 * @export
 * @class StatisticsApi
 * @extends {BaseAPI}
 */
export class StatisticsApi extends BaseAPI implements StatisticsApiInterface {
    /**
     * Get category breakdown for a specific date range
     * @summary Get category statistics
     * @param {StatisticsApiStatsCategoriesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statsCategoriesGet(requestParameters: StatisticsApiStatsCategoriesGetRequest, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statsCategoriesGet(requestParameters.fromDate, requestParameters.toDate, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get income, expense and net statistics for a specific month
     * @summary Get monthly statistics
     * @param {StatisticsApiStatsMonthlyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statsMonthlyGet(requestParameters: StatisticsApiStatsMonthlyGetRequest, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statsMonthlyGet(requestParameters.year, requestParameters.month, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get monthly breakdown statistics for an entire year
     * @summary Get yearly overview
     * @param {StatisticsApiStatsYearlyGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsApi
     */
    public statsYearlyGet(requestParameters: StatisticsApiStatsYearlyGetRequest, options?: RawAxiosRequestConfig) {
        return StatisticsApiFp(this.configuration).statsYearlyGet(requestParameters.year, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const StatsCategoriesGetTypeEnum = {
    Income: 'INCOME',
    Expense: 'EXPENSE'
} as const;
export type StatsCategoriesGetTypeEnum = typeof StatsCategoriesGetTypeEnum[keyof typeof StatsCategoriesGetTypeEnum];


/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get transactions for the authenticated user with filtering and pagination
         * @summary Get user transactions
         * @param {TransactionsGetTypeEnum} [type] Filter by transaction type
         * @param {string} [categoryId] Filter by category ID
         * @param {string} [fromDate] Filter from date (YYYY-MM-DD)
         * @param {string} [toDate] Filter to date (YYYY-MM-DD)
         * @param {number} [limit] Number of transactions to return
         * @param {number} [offset] Number of transactions to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet: async (type?: TransactionsGetTypeEnum, categoryId?: string, fromDate?: string, toDate?: string, limit?: number, offset?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }

            if (fromDate !== undefined) {
                localVarQueryParameter['from_date'] = fromDate;
            }

            if (toDate !== undefined) {
                localVarQueryParameter['to_date'] = toDate;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a transaction permanently
         * @summary Delete transaction
         * @param {string} id Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsIdDelete: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('transactionsIdDelete', 'id', id)
            const localVarPath = `/transactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific transaction by its ID
         * @summary Get transaction by ID
         * @param {string} id Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('transactionsIdGet', 'id', id)
            const localVarPath = `/transactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing transaction
         * @summary Update transaction
         * @param {string} id Transaction ID
         * @param {ModelsUpdateTransactionRequest} request Transaction update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsIdPut: async (id: string, request: ModelsUpdateTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('transactionsIdPut', 'id', id)
            // verify required parameter 'request' is not null or undefined
            assertParamExists('transactionsIdPut', 'request', request)
            const localVarPath = `/transactions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new income or expense transaction
         * @summary Create a new transaction
         * @param {ModelsCreateTransactionRequest} request Transaction data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsPost: async (request: ModelsCreateTransactionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('transactionsPost', 'request', request)
            const localVarPath = `/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get transactions for the authenticated user with filtering and pagination
         * @summary Get user transactions
         * @param {TransactionsGetTypeEnum} [type] Filter by transaction type
         * @param {string} [categoryId] Filter by category ID
         * @param {string} [fromDate] Filter from date (YYYY-MM-DD)
         * @param {string} [toDate] Filter to date (YYYY-MM-DD)
         * @param {number} [limit] Number of transactions to return
         * @param {number} [offset] Number of transactions to skip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsGet(type?: TransactionsGetTypeEnum, categoryId?: string, fromDate?: string, toDate?: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsTransactionListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsGet(type, categoryId, fromDate, toDate, limit, offset, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a transaction permanently
         * @summary Delete transaction
         * @param {string} id Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsIdDelete(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAcceptInvitationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get a specific transaction by its ID
         * @summary Get transaction by ID
         * @param {string} id Transaction ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing transaction
         * @summary Update transaction
         * @param {string} id Transaction ID
         * @param {ModelsUpdateTransactionRequest} request Transaction update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsIdPut(id: string, request: ModelsUpdateTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsIdPut(id, request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new income or expense transaction
         * @summary Create a new transaction
         * @param {ModelsCreateTransactionRequest} request Transaction data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsPost(request: ModelsCreateTransactionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsTransaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsPost(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TransactionsApi.transactionsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * Get transactions for the authenticated user with filtering and pagination
         * @summary Get user transactions
         * @param {TransactionsApiTransactionsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet(requestParameters: TransactionsApiTransactionsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ModelsTransactionListResponse> {
            return localVarFp.transactionsGet(requestParameters.type, requestParameters.categoryId, requestParameters.fromDate, requestParameters.toDate, requestParameters.limit, requestParameters.offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a transaction permanently
         * @summary Delete transaction
         * @param {TransactionsApiTransactionsIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsIdDelete(requestParameters: TransactionsApiTransactionsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthAcceptInvitationPost200Response> {
            return localVarFp.transactionsIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific transaction by its ID
         * @summary Get transaction by ID
         * @param {TransactionsApiTransactionsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsIdGet(requestParameters: TransactionsApiTransactionsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsTransaction> {
            return localVarFp.transactionsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing transaction
         * @summary Update transaction
         * @param {TransactionsApiTransactionsIdPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsIdPut(requestParameters: TransactionsApiTransactionsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsTransaction> {
            return localVarFp.transactionsIdPut(requestParameters.id, requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new income or expense transaction
         * @summary Create a new transaction
         * @param {TransactionsApiTransactionsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsPost(requestParameters: TransactionsApiTransactionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsTransaction> {
            return localVarFp.transactionsPost(requestParameters.request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionsApi - interface
 * @export
 * @interface TransactionsApi
 */
export interface TransactionsApiInterface {
    /**
     * Get transactions for the authenticated user with filtering and pagination
     * @summary Get user transactions
     * @param {TransactionsApiTransactionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    transactionsGet(requestParameters?: TransactionsApiTransactionsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsTransactionListResponse>;

    /**
     * Delete a transaction permanently
     * @summary Delete transaction
     * @param {TransactionsApiTransactionsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    transactionsIdDelete(requestParameters: TransactionsApiTransactionsIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthAcceptInvitationPost200Response>;

    /**
     * Get a specific transaction by its ID
     * @summary Get transaction by ID
     * @param {TransactionsApiTransactionsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    transactionsIdGet(requestParameters: TransactionsApiTransactionsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsTransaction>;

    /**
     * Update an existing transaction
     * @summary Update transaction
     * @param {TransactionsApiTransactionsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    transactionsIdPut(requestParameters: TransactionsApiTransactionsIdPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsTransaction>;

    /**
     * Create a new income or expense transaction
     * @summary Create a new transaction
     * @param {TransactionsApiTransactionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApiInterface
     */
    transactionsPost(requestParameters: TransactionsApiTransactionsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsTransaction>;

}

/**
 * Request parameters for transactionsGet operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsGetRequest
 */
export interface TransactionsApiTransactionsGetRequest {
    /**
     * Filter by transaction type
     * @type {'INCOME' | 'EXPENSE'}
     * @memberof TransactionsApiTransactionsGet
     */
    readonly type?: TransactionsGetTypeEnum

    /**
     * Filter by category ID
     * @type {string}
     * @memberof TransactionsApiTransactionsGet
     */
    readonly categoryId?: string

    /**
     * Filter from date (YYYY-MM-DD)
     * @type {string}
     * @memberof TransactionsApiTransactionsGet
     */
    readonly fromDate?: string

    /**
     * Filter to date (YYYY-MM-DD)
     * @type {string}
     * @memberof TransactionsApiTransactionsGet
     */
    readonly toDate?: string

    /**
     * Number of transactions to return
     * @type {number}
     * @memberof TransactionsApiTransactionsGet
     */
    readonly limit?: number

    /**
     * Number of transactions to skip
     * @type {number}
     * @memberof TransactionsApiTransactionsGet
     */
    readonly offset?: number
}

/**
 * Request parameters for transactionsIdDelete operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsIdDeleteRequest
 */
export interface TransactionsApiTransactionsIdDeleteRequest {
    /**
     * Transaction ID
     * @type {string}
     * @memberof TransactionsApiTransactionsIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for transactionsIdGet operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsIdGetRequest
 */
export interface TransactionsApiTransactionsIdGetRequest {
    /**
     * Transaction ID
     * @type {string}
     * @memberof TransactionsApiTransactionsIdGet
     */
    readonly id: string
}

/**
 * Request parameters for transactionsIdPut operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsIdPutRequest
 */
export interface TransactionsApiTransactionsIdPutRequest {
    /**
     * Transaction ID
     * @type {string}
     * @memberof TransactionsApiTransactionsIdPut
     */
    readonly id: string

    /**
     * Transaction update data
     * @type {ModelsUpdateTransactionRequest}
     * @memberof TransactionsApiTransactionsIdPut
     */
    readonly request: ModelsUpdateTransactionRequest
}

/**
 * Request parameters for transactionsPost operation in TransactionsApi.
 * @export
 * @interface TransactionsApiTransactionsPostRequest
 */
export interface TransactionsApiTransactionsPostRequest {
    /**
     * Transaction data
     * @type {ModelsCreateTransactionRequest}
     * @memberof TransactionsApiTransactionsPost
     */
    readonly request: ModelsCreateTransactionRequest
}

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI implements TransactionsApiInterface {
    /**
     * Get transactions for the authenticated user with filtering and pagination
     * @summary Get user transactions
     * @param {TransactionsApiTransactionsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsGet(requestParameters: TransactionsApiTransactionsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsGet(requestParameters.type, requestParameters.categoryId, requestParameters.fromDate, requestParameters.toDate, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a transaction permanently
     * @summary Delete transaction
     * @param {TransactionsApiTransactionsIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsIdDelete(requestParameters: TransactionsApiTransactionsIdDeleteRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific transaction by its ID
     * @summary Get transaction by ID
     * @param {TransactionsApiTransactionsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsIdGet(requestParameters: TransactionsApiTransactionsIdGetRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing transaction
     * @summary Update transaction
     * @param {TransactionsApiTransactionsIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsIdPut(requestParameters: TransactionsApiTransactionsIdPutRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsIdPut(requestParameters.id, requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new income or expense transaction
     * @summary Create a new transaction
     * @param {TransactionsApiTransactionsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsPost(requestParameters: TransactionsApiTransactionsPostRequest, options?: RawAxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsPost(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const TransactionsGetTypeEnum = {
    Income: 'INCOME',
    Expense: 'EXPENSE'
} as const;
export type TransactionsGetTypeEnum = typeof TransactionsGetTypeEnum[keyof typeof TransactionsGetTypeEnum];


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the authenticated user\'s profile information
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change the authenticated user\'s password
         * @summary Change user password
         * @param {ProfilePasswordPutRequest} request Password change data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilePasswordPut: async (request: ProfilePasswordPutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('profilePasswordPut', 'request', request)
            const localVarPath = `/profile/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the authenticated user\'s profile information
         * @summary Update user profile
         * @param {ProfilePutRequest} request Profile update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilePut: async (request: ProfilePutRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            assertParamExists('profilePut', 'request', request)
            const localVarPath = `/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the authenticated user\'s profile information
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profileGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profileGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.profileGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Change the authenticated user\'s password
         * @summary Change user password
         * @param {ProfilePasswordPutRequest} request Password change data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilePasswordPut(request: ProfilePasswordPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthAcceptInvitationPost200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilePasswordPut(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.profilePasswordPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the authenticated user\'s profile information
         * @summary Update user profile
         * @param {ProfilePutRequest} request Profile update data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profilePut(request: ProfilePutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profilePut(request, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserApi.profilePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Get the authenticated user\'s profile information
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsUser> {
            return localVarFp.profileGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Change the authenticated user\'s password
         * @summary Change user password
         * @param {UserApiProfilePasswordPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilePasswordPut(requestParameters: UserApiProfilePasswordPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthAcceptInvitationPost200Response> {
            return localVarFp.profilePasswordPut(requestParameters.request, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the authenticated user\'s profile information
         * @summary Update user profile
         * @param {UserApiProfilePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profilePut(requestParameters: UserApiProfilePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsUser> {
            return localVarFp.profilePut(requestParameters.request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     * Get the authenticated user\'s profile information
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    profileGet(options?: RawAxiosRequestConfig): AxiosPromise<ModelsUser>;

    /**
     * Change the authenticated user\'s password
     * @summary Change user password
     * @param {UserApiProfilePasswordPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    profilePasswordPut(requestParameters: UserApiProfilePasswordPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthAcceptInvitationPost200Response>;

    /**
     * Update the authenticated user\'s profile information
     * @summary Update user profile
     * @param {UserApiProfilePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    profilePut(requestParameters: UserApiProfilePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsUser>;

}

/**
 * Request parameters for profilePasswordPut operation in UserApi.
 * @export
 * @interface UserApiProfilePasswordPutRequest
 */
export interface UserApiProfilePasswordPutRequest {
    /**
     * Password change data
     * @type {ProfilePasswordPutRequest}
     * @memberof UserApiProfilePasswordPut
     */
    readonly request: ProfilePasswordPutRequest
}

/**
 * Request parameters for profilePut operation in UserApi.
 * @export
 * @interface UserApiProfilePutRequest
 */
export interface UserApiProfilePutRequest {
    /**
     * Profile update data
     * @type {ProfilePutRequest}
     * @memberof UserApiProfilePut
     */
    readonly request: ProfilePutRequest
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI implements UserApiInterface {
    /**
     * Get the authenticated user\'s profile information
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public profileGet(options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).profileGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change the authenticated user\'s password
     * @summary Change user password
     * @param {UserApiProfilePasswordPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public profilePasswordPut(requestParameters: UserApiProfilePasswordPutRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).profilePasswordPut(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the authenticated user\'s profile information
     * @summary Update user profile
     * @param {UserApiProfilePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public profilePut(requestParameters: UserApiProfilePutRequest, options?: RawAxiosRequestConfig) {
        return UserApiFp(this.configuration).profilePut(requestParameters.request, options).then((request) => request(this.axios, this.basePath));
    }
}



